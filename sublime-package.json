{
	"contributions": {
		"settings": [
			{
				"file_patterns": [
					"/LSP-lemminx.sublime-settings"
				],
				"schema": {
					"$id": "sublime://settings/LSP-lemminx",
					"definitions": {
						"PluginConfig": {
							"properties": {
								"initializationOptions": {
									"type": "object",
									"properties": {
										"settings": {
											"$ref": "sublime://settings/LSP-lemminx#/definitions/ServerSettings"
										}
									}
								},
								"settings": {
									"$ref": "sublime://settings/LSP-lemminx#/definitions/ServerSettings"
								}
							}
						},
						"ServerSettings": {
							"type": "object",
							"properties": {
								"xml.trace.server": {
									"type": "string",
									"enum": [
										"off",
										"messages",
										"verbose"
									],
									"default": "off",
									"markdownDescription": "Traces the communication between Sublime Text and the XML language server in the Output view. Default is `off`."
								},
								"xml.logs.client": {
									"type": "boolean",
									"default": true,
									"markdownDescription": "Enable/disable logging to the Output view. Default is `true`."
								},
								"xml.logs.file": {
									"type": "string",
									"default": "",
									"description": "File path to write the server log output to."
								},
								"xml.downloadExternalResources.enabled": {
									"type": "boolean",
									"default": true,
									"markdownDescription": "Download external resources like referenced DTD, XSD. Default is `true`."
								},
								"xml.catalogs": {
									"type": "array",
									"default": [],
									"items": {
										"type": "string"
									},
									"markdownDescription": "Register XML catalog files. See how to configure [XML catalog with XSD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-catalog-with-xsd%22%7D%5D) or [XML catalog with DTD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-catalog-with-dtd%22%7D%5D) for more information."
								},
								"xml.fileAssociations": {
									"type": "array",
									"default": [],
									"items": {
										"type": "object",
										"properties": {
											"pattern": {
												"type": "string",
												"markdownDescription": "File glob pattern. Example: `**/*.Format.ps1xml`\n\nMore information on the glob syntax: https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob"
											},
											"systemId": {
												"type": "string",
												"description": "The path or URL to the XML schema (XSD or DTD)."
											}
										},
										"required": [
											"pattern",
											"systemId"
										]
									},
									"markdownDescription": "Allows XML schemas/ DTD to be associated to file name patterns. Please refer to [XML file association with XSD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-file-association-with-xsd%22%7D%5D) or [XML file association with DTD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-file-association-with-dtd%22%7D%5D) for more information. \n\nExample:\n```json\n[{\n  \"pattern\": \"file1.xml\",\n  \"systemId\": \"path/to/file.xsd\"\n},\n{\n  \"pattern\": \"**/*.xsd\",\n  \"systemId\": \"http://www.w3.org/2001/XMLSchema.xsd\"\n}]\n```"
								},
								"xml.foldings.includeClosingTagInFold": {
									"type": "boolean",
									"default": false,
									"markdownDescription": "Minimize the closing tag after folding. Default is `false`."
								},
								"xml.format.enabled": {
									"type": "boolean",
									"default": true,
									"markdownDescription": "Enable/disable ability to format document. Default is `true`."
								},
								"xml.format.emptyElements": {
									"type": "string",
									"enum": [
										"ignore",
										"collapse",
										"expand"
									],
									"default": "ignore",
									"markdownDescription": "Expand/collapse empty elements. Default is `ignore`."
								},
								"xml.format.enforceQuoteStyle": {
									"type": "string",
									"enum": [
										"preferred",
										"ignore"
									],
									"markdownEnumDescriptions": [
										"Use preferred quote style set by `xml.preferences.quoteStyle` when formatting.",
										"Ignore quote style formatting."
									],
									"default": "ignore",
									"markdownDescription": "Enforce `preferred` quote style (set by `#xml.preferences.quoteStyle#`) or `ignore` quote style when formatting. Default is `ignore`."
								},
								"xml.format.legacy": {
									"type": "boolean",
									"default": false,
									"markdownDescription": "Enable/disable legacy formatter. Default is `false`."
								},
								"xml.format.grammarAwareFormatting": {
									"type": "boolean",
									"default": true,
									"markdownDescription": "Use Schema/DTD grammar information while formatting. Default is `true`. Not supported by legacy formatter."
								},
								"xml.format.joinCDATALines": {
									"type": "boolean",
									"default": false,
									"markdownDescription": "Set to `true` to join lines in CDATA content during formatting. Default is `false`."
								},
								"xml.format.joinCommentLines": {
									"type": "boolean",
									"default": false,
									"markdownDescription": "Join comment content on format. Default is `false`."
								},
								"xml.format.joinContentLines": {
									"type": "boolean",
									"default": false,
									"markdownDescription": "Normalize the whitespace of content inside an element. Newlines and excess whitespace are removed. Default is `false`."
								},
								"xml.format.maxLineWidth": {
									"type": "integer",
									"default": 100,
									"markdownDescription": "Max line width. Set to `0` to disable this setting. Default is `100`. Not supported by legacy formatter."
								},
								"xml.format.preserveAttributeLineBreaks": {
									"type": "boolean",
									"default": true,
									"markdownDescription": "Preserve line breaks that appear before and after attributes. This setting is overridden if `#xml.format.splitAttributes#` is set to `true`. Default is `true`."
								},
								"xml.format.preserveEmptyContent": {
									"type": "boolean",
									"default": false,
									"markdownDescription": "Preserve empty content/whitespace in a tag. Default is `false`. Supported only with legacy formatter."
								},
								"xml.format.preservedNewlines": {
									"type": "integer",
									"enum": [
										0,
										1,
										2,
										3
									],
									"default": 2,
									"markdownDescription": "Preserve new lines that separate tags. The value represents the maximum number of new lines per section. A value of 0 removes all new lines. Default is `2`."
								},
								"xml.format.preserveSpace": {
									"type": "array",
									"default": [
										"xsl:text",
										"xsl:comment",
										"xsl:processing-instruction",
										"literallayout",
										"programlisting",
										"screen",
										"synopsis",
										"pre",
										"xd:pre"
									],
									"items": {
										"type": "string"
									},
									"markdownDescription": "Element names for which spaces will be preserved. Not supported by legacy formatter."
								},
								"xml.format.spaceBeforeEmptyCloseTag": {
									"type": "boolean",
									"default": true,
									"markdownDescription": "Insert space before end of self closing tag. \nExample:\n  ```<tag/> -> <tag />```. Default is `true`."
								},
								"xml.format.xsiSchemaLocationSplit": {
									"type": "string",
									"enum": [
										"onElement",
										"onPair",
										"none"
									],
									"markdownEnumDescriptions": [
										"Put a new line after each namespace and URI, arranging them into one column.",
										"Put a new line after each URI, arranging the content into pairs of namespace and URI.",
										"Ignore `xsi:schemaLocation` content formatting."
									],
									"default": "onPair",
									"markdownDescription": "Split `xsi:schemaLocation` content. Default is `onPair`."
								},
								"xml.format.splitAttributes": {
									"type": "boolean",
									"default": false,
									"markdownDescription": "Split multiple attributes each onto a new line. Default is `false`. Indicate level of indentation with `#xml.format.splitAttributesIndentSize#`."
								},
								"xml.format.splitAttributesIndentSize": {
									"type": "number",
									"default": 2,
									"markdownDescription": "How many levels to indent the attributes by when `#xml.format.splitAttributes#` is `true`. Default value is `2`."
								},
								"xml.format.closingBracketNewLine": {
									"type": "boolean",
									"default": false,
									"markdownDescription": "The option to put a closing bracket on a newline when `#xml.format.splitAttributes#` is `true`. Default value is `false`."
								},
								"xml.completion.autoCloseTags": {
									"type": "boolean",
									"default": true,
									"markdownDescription": "Enable/disable autoclosing of XML tags. Default is `true`. \n\nIMPORTANT: Turn off `#editor.autoClosingTags#` for this to work."
								},
								"xml.completion.autoCloseRemovesContent": {
									"type": "boolean",
									"default": true,
									"markdownDescription": "Enable/disable the content of an element being removed when the element start tag is turned into a self-closing tag. The default setting is to remove the content."
								},
								"xml.codeLens.enabled": {
									"type": "boolean",
									"default": false,
									"markdownDescription": "Enable/disable XML CodeLens. Default is `false`."
								},
								"xml.preferences.quoteStyle": {
									"type": "string",
									"enum": [
										"single",
										"double"
									],
									"default": "double",
									"markdownDescription": "Preferred quote style to use for completion: `single` quotes, `double` quotes. Default is `double`."
								},
								"xml.preferences.showSchemaDocumentationType": {
									"type": "string",
									"default": "all",
									"enum": [
										"documentation",
										"appinfo",
										"all",
										"none"
									],
									"markdownEnumDescriptions": [
										"Documentation comes from the `xs:documentation` element.",
										"Documentation comes from the `xs:appinfo` element.",
										"Documentation comes from the `xs:documentation` and `xs:appinfo` elements.",
										"Displays no documentation."
									],
									"markdownDescription": "Specifies the source of the XML schema documentation displayed on hover and completion. Default is `all`."
								},
								"xml.validation.enabled": {
									"type": "boolean",
									"default": true,
									"markdownDescription": "Enable/disable all validation. Default is `true`."
								},
								"xml.validation.namespaces.enabled": {
									"type": "string",
									"default": "always",
									"enum": [
										"always",
										"never",
										"onNamespaceEncountered"
									],
									"markdownEnumDescriptions": [
										"Enable namespaces validation.",
										"Disable namespaces validation.",
										"Enable namespaces validation only when the root element declares an xmlns namespace."
									],
									"markdownDescription": "Enable/disable namespaces validation. Default is `always`. Ignored if `#xml.validation.enabled#` is set to `false`."
								},
								"xml.validation.schema.enabled": {
									"type": "string",
									"default": "always",
									"enum": [
										"always",
										"never",
										"onValidSchema"
									],
									"markdownEnumDescriptions": [
										"Enable schema based validation.",
										"Disable schema based validation.",
										"Enable schema based validation only when the declared xsi:schemaLocation hint or xsi:noNamespaceSchemaLocation is valid for the root element."
									],
									"markdownDescription": "Enable/disable schema based validation. Default is `always`. Ignored if `#xml.validation.enabled#` is set to `false`."
								},
								"xml.validation.disallowDocTypeDecl": {
									"type": "boolean",
									"default": false,
									"markdownDescription": "Enable/disable if a fatal error is thrown if the incoming document contains a DOCTYPE declaration. Default is `false`."
								},
								"xml.validation.resolveExternalEntities": {
									"type": "boolean",
									"default": false,
									"markdownDescription": "Enable/disable resolve of external entities. Default is `false`."
								},
								"xml.validation.xInclude.enabled": {
									"type": "boolean",
									"default": false,
									"markdownDescription": "Enable/disable validation for `xi:include`. Default is `false`."
								},
								"xml.validation.noGrammar": {
									"type": "string",
									"enum": [
										"ignore",
										"hint",
										"info",
										"warning",
										"error"
									],
									"default": "hint",
									"markdownDescription": "The message severity when a document has no associated grammar. Default is `hint`."
								},
								"xml.symbols.enabled": {
									"type": "boolean",
									"default": true,
									"markdownDescription": "Enable/disable document symbols (Outline). Default is `true`. No symbols are given if `\"xml.symbols.enabled\": false`."
								},
								"xml.validation.filters": {
									"type": "array",
									"default": [
										{
											"pattern": "**.exsd",
											"noGrammar": "ignore",
											"schema": {
												"enabled": "never"
											}
										},
										{
											"pattern": "**{.project,.classpath,plugin.xml,feature.xml,category.xml,.target,.product}",
											"noGrammar": "ignore"
										}
									],
									"items": {
										"type": "object",
										"properties": {
											"pattern": {
												"type": "string",
												"markdownDescription": "File glob pattern. Example: `**/*.Format.ps1xml`\n\nMore information on the glob syntax: https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob"
											}
										},
										"required": [
											"pattern"
										]
									}
								},
								"xml.symbols.excluded": {
									"type": "array",
									"default": [],
									"items": {
										"type": "string"
									},
									"markdownDescription": "Disable document symbols (Outline) for the given file name patterns. Updating file name patterns does not automatically reload the Outline view for the relevant file(s). Each file must either be reopened or changed, in order to trigger an Outline view reload.\n\nExample:\n```\n[\n \"**/*LargeFile.xml\"\n]```.",
								},
								"xml.symbols.maxItemsComputed": {
									"type": "integer",
									"default": 5000,
									"markdownDescription": "The maximum number of outline symbols and folding regions computed (limited for performance reasons). Default is `5000`."
								},
								"xml.symbols.showReferencedGrammars": {
									"type": "boolean",
									"default": true,
									"markdownDescription": "Show referenced grammars in the Outline. Default is `true`.",
								},
								"xml.symbols.filters": {
									"type": "array",
									"default": [],
									"items": {
										"type": "object",
										"properties": {
											"pattern": {
												"type": "string",
												"markdownDescription": "File glob pattern. Example: `**/*.Format.ps1xml`\n\nMore information on the glob syntax: https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob"
											},
											"expressions": {
												"type": "array",
												"default": [],
												"items": {
													"type": "object",
													"description": "The XML symbol expression.",
													"properties": {
														"xpath": {
															"type": "string",
															"markdownDescription": "The XPath expression of the filter."
														},
														"excluded": {
															"type": "boolean",
															"description": "Exclude/Include the node which matches the XPath expression."
														},
														"inlineAttribute": {
															"type": "boolean",
															"description": "Whether or not to show an attribute expression inline with the owning element instead of nested."
														},
														"showAttributeName": {
															"type": "boolean",
															"description": "Whether or not the attribute expression name should be shown along with its value (for inline attributes only)."
														}
													}
												},
												"markdownDescription": "Array of XML symbol expressions"
											}
										},
										"required": [
											"pattern",
											"expressions"
										]
									},
									"markdownDescription": "Allows XML symbols filter to be associated to file name patterns.",
								},
								"xml.extension.jars": {
									"type": "array",
									"default": [],
									"markdownDescription": "An array of paths to JARs that should be contributed to the LemMinX classpath. The paths can include glob patterns. This is intended to be used as a tool for developing extensions to vscode-xml.",
								}
							}
						}
					},
					"allOf": [
						{
							"$ref": "sublime://settings/LSP-plugin-base"
						},
						{
							"$ref": "sublime://settings/LSP-lemminx#/definitions/PluginConfig"
						}
					]
				}
			},
			{
				"file_patterns": [
					"/LSP.sublime-settings"
				],
				"schema": {
					"properties": {
						"clients": {
							"properties": {
								"LSP-lemminx": {
									"$ref": "sublime://settings/LSP-lemminx#/definitions/PluginConfig"
								}
							}
						}
					}
				}
			},
			{
				"file_patterns": [
					"/*.sublime-project"
				],
				"schema": {
					"properties": {
						"settings": {
							"properties": {
								"LSP": {
									"properties": {
										"LSP-lemminx": {
											"$ref": "sublime://settings/LSP-lemminx#/definitions/PluginConfig"
										}
									}
								}
							}
						}
					}
				}
			}
		]
	}
}
